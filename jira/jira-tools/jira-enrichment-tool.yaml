tools:
  - name: jira-enrichment-tool
    description: 'Create a new Jira issue in a specified project'
    type: python
    alias: jira-en
    content: |
      from flask import Flask, jsonify
      import requests
      import os
      import warnings
      import json

      app = Flask(__name__)

      # Suppress specific warnings
      #warnings.filterwarnings("ignore", category=UserWarning, module='urllib3')

      # Function to create a new Jira issue in a specified project
      def create_jira_issue(summary, description, project, issue_type_name, jira_base_url, jira_auth_token, issue_cat,
                          af_customer, original_issue_key):
          if not jira_base_url or not jira_auth_token:
              raise ValueError("JIRA_BASE_URL and JIRA_AUTH_TOKEN must be provided.")

          url = f'https://{jira_base_url}/rest/api/3/issue/'
          headers = {
              'Authorization': f'Bearer {jira_auth_token}',
              'Content-Type': 'application/json'
          }
          payload = {
              'fields': {
                  'project': {
                      'key': project  # Set the project key dynamically
                  },
                  'summary': summary,
                  "description": {
                      "type": "doc",
                      "version": 1,
                      "content": [
                      {
                          "type": "paragraph",
                          "content": [
                          {
                              "type": "text",
                              "text": "description"
                          }
                          ]
                      }
                      ]
                  },
                  'issuetype': {
                      'name': issue_type_name  # Use the configured issue type name
                  },
                  "priority": {
                      "self": "https://api.atlassian.com/ex/jira/bfc30b91-e9ae-4dc7-a21d-e70197efd2db/rest/api/3/priority/2",
                      "iconUrl": "https://kubiya.atlassian.net/images/icons/priorities/high.svg",
                      "name": "High",
                      "id": "2"
                  },
                  'customfield_10079': {
                      'value': issue_cat
                  },
                  'customfield_10062': [af_customer]
               },
              'update': {
                  'issuelinks': [
                      {
                          'add': {
                              'type': {
                                  "name": "Problem/Incident",
                                  "inward": "is caused by",
                                  "outward": "causes",
                              },
                              'inwardIssue': {
                                  'key': original_issue_key  # Key of the original issue
                              }
                          }
                      }
                  ]
              }
          }

          try:
              response = requests.post(url, headers=headers, json=payload)
              print(response.text)
              response.raise_for_status()  # Raise exception for non-2xx status codes
              new_issue_key = response.json()['key']
              print(f'New Jira issue created successfully in project {project}. Issue key: {new_issue_key}')
              return new_issue_key

          except requests.exceptions.RequestException as e:
              print(f'Error creating new Jira issue: {e}')
              return None


      # Function to get users from Auth0
      def get_users(auth0_domain, management_api_token, page=0, per_page=100):
          print("got here atleast!!!!!")
          url = f'https://{auth0_domain}/api/v2/users'
          headers = {
              'Authorization': f'Bearer {management_api_token}',
              'Content-Type': 'application/json'
          }
          params = {
              'page': page,
              'per_page': per_page,
              'fields': 'email',
              'include_fields': 'true'
          }
          response = requests.get(url, headers=headers, params=params)
          if response.status_code == 200:
              return response.json()
          else:
              print(f'Failed to retrieve users: {response.status_code} - {response.text}')
              return []


      # Function to filter users by email domain
      def filter_users_by_domain(users, domain):
          return [user for user in users if 'email' in user and user['email'].endswith(f'@{domain}')]

      # Function to filter users by name
      def filter_users_by_display_name(users, display_name):
          return [user for user in users if 'name' in user and user['name'] == display_name]


      # Function to get all users from Auth0
      def get_all_users(auth0_domain, management_api_token):
          all_users = []
          page = 0
          while True:
              users = get_users(auth0_domain, management_api_token, page=page)
              if not users:
                  break
              all_users.extend(users)
              page += 1
          return all_users


      # Main function to handle incoming payload and integrate with other functions
      def handle_payload(description, original_issue_key, summary, display_name, auth0_domain, management_api_token, project, issue_type_name, jira_base_url,
                      jira_auth_token):
          try:
              username, email_domain = display_name.split('@')
              all_users = get_all_users(auth0_domain, management_api_token)
              filtered_users = filter_users_by_domain(all_users, email_domain)
              print(f'Found {len(filtered_users)} users with email domain {email_domain}:')
              for user in filtered_users:
                  print(user['email'])
          except:
              all_users = get_all_users(auth0_domain, management_api_token)
              filtered_users = filter_users_by_display_name(all_users, display_name)
              if len(filtered_users) > 0:
                  email_domain = "kubiya.ai"
                  print(f'Found {len(filtered_users)} users with email domain {email_domain}:')
                  for user in filtered_users:
                      print(user['email'])

          # Check if there are filtered users
          if len(filtered_users) > 0:
              # Assuming ISSUE_CAT and AF_CUSTOMER are environment variables
              issue_cat = os.getenv('ISSUE_CAT')
              af_customer = os.getenv('AF_CUSTOMER')
              if summary and description:
                  print(f'\nJira Issue Summary: {summary}')
                  print(f'Jira Issue Description:\n{description}')
                  # Create a new Jira issue in the specified project
                  create_jira_issue(summary, description, project, issue_type_name, jira_base_url, jira_auth_token,
                                  issue_cat, af_customer, original_issue_key)
              else:
                  print('Failed to retrieve Jira issue details.')


      if __name__ == '__main__':
          try:
              auth0_domain = os.getenv('AUTH0_DOMAIN')
              management_api_token = os.getenv('AUTH0_MANAGEMENT_API_TOKEN')
              project = os.getenv('PROJECT')
              issue_type_name = os.getenv('JIRA_ISSUE_TYPE_NAME')
              jira_base_url = os.getenv('JIRA_BASE_URL')
              jira_auth_token = os.getenv('JIRA_AUTH_TOKEN')
              original_issue_key = "{{ .original_issue_key }}"
              summary = "{{ .summary }}"
              description = "{{ .description }}"
              display_name = "{{ .display_name}}"
              handle_payload(description, original_issue_key, summary, display_name, auth0_domain, management_api_token, project, issue_type_name, jira_base_url, jira_auth_token)
            #   print(jsonify({'message': 'Payload processed successfully'}))
          except Exception as e:
            #   print(jsonify({'error': str(e)}))
              print("error")

    dependencies: |
        requests==2.28.1
        Flask==2.0.2
        Werkzeug==2.0.2
    args:
        original_issue_key:
          description: 'the original issue key'
          required: true

        summary:
          description: 'the original issue summary'
          required: true

        description:
          description: 'the original issue description'
          required: true

        display_name:
          description: 'the display name of the creator'
          required: true
    env:
      - "AUTH0_DOMAIN"
      - "PROJECT"
      - "JIRA_BASE_URL"
      - "JIRA_ISSUE_TYPE_NAME"
      - "ISSUE_CAT"
      - "AF_CUSTOMER"
      - "AUTH0_MANAGEMENT_API_TOKEN"
      - "JIRA_AUTH_TOKEN"      
      
